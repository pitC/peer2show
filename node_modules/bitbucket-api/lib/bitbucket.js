"use strict";
var Repository = require('./repository').Repository;
var EventEmitter = require('events').EventEmitter;
var qs = require('querystring');
var connection = require('./curl-transport').connection;

function BitBucket(options) {
  this.username = options.username;
  this.password = options.password;
  this.root = "api.bitbucket.org";
  this.version = "1.0";
  this.getCredentials = function () {
    return this.username + ":" + this.password;
  };
  this.getUrl = function () {
    return "https://" + this.root + "/" + this.version;
  };
}

BitBucket.prototype.getRepository = function (repository, cb) {
  if (!repository.slug) { return cb(new Error('Repository slug is required.'), null); }
  if (!repository.owner) { return cb(new Error('Repository owner is required.'), null); }
  if (!cb) { return cb(new Error('Callback is required.'), null); }
  var self = this;
  var url = self.getUrl() + "/repositories/" + repository.owner + "/" + repository.slug;
  connection(self.getCredentials()).get(url, function (err, data) {
    cb(err, new Repository(self, data));
  });
};

BitBucket.prototype.repositories = function (cb) {
  var self = this;
  self.user().repositories().getAll(cb);
};

BitBucket.prototype.user = function () {
  var self = this;
  var url = self.getUrl() + "/user";
  return {
    follows: function (cb) {
      connection(self.getCredentials()).get(url + "/follows/", cb);
    },
    get: function (cb) {
      connection(self.getCredentials()).get(url, cb);
    },
    privileges: function (cb) {
      connection(self.getCredentials()).get(url + "/privileges/", cb);
    },
    update: function (user, cb) {
      connection(self.getCredentials()).put(url, qs.stringify(user), cb);
    },
    repositories: function () {
      return {
        dashboard: function (cb) {
          connection(self.getCredentials()).get(url + "/repositories/dashboard/", cb);
        },
        following: function (cb) {
          connection(self.getCredentials()).get(url + "/repositories/overview/", cb);
        },
        getAll: function (cb) {
          connection(self.getCredentials()).get(url + "/repositories/", cb);
        }
      };
    },
  }
};

BitBucket.prototype.users = function (nameOrEmail) {
  var self = this;
  // var url = self.getUrl() + "/users";
  var accounUrl = self.getUrl() + "/users/" + nameOrEmail;
  return {
    account: function () {
      return {
        followers: function (cb) {
          connection(self.getCredentials()).get(accounUrl + "/followers", cb);
        },
        get: function (cb) {
          connection(self.getCredentials()).get(accounUrl, cb);
        },
        plan: function (cb) {
          connection(self.getCredentials()).get(accounUrl + "/plan", cb);
        }
      };
    },
    emails: function () {
      var emailUrl = accounUrl + "/emails";
      return {
        add: function (email, cb) {
          connection(self.getCredentials()).put(emailUrl + "/" + email, qs.stringify({"email": email}), cb);
        },
        get: function (email, cb) {
          connection(self.getCredentials()).get(emailUrl + "/" + email, cb);
        },
        getAll: function (cb) {
          connection(self.getCredentials()).get(emailUrl, cb);
        },
        setAsPrimary: function (email, cb) {
          connection(self.getCredentials()).put(emailUrl + "/" + email, qs.stringify({"primary": true}), cb);
        }
      }
    }
  }
};

exports.createClient = function (options) {
  if (!options.username) { throw new Error('Username is required'); }
  if (!options.password) { throw new Error('Password is required'); }
  return new BitBucket(options);
};
