{
  "author": {
    "name": "Hernan Garcia",
    "email": "hernan@dynamicprogrammer.com",
    "url": "http://blog.dynamicprogrammer.com"
  },
  "name": "bitbucket-api",
  "description": "A package to access the BitBucket Api.",
  "version": "0.0.6",
  "repository": {
    "url": "https://hgarcia@bitbucket.org/hgarcia/node-bitbucket-api.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "mocha tests/*.tests.js -t 15000"
  },
  "dependencies": {},
  "devDependencies": {
    "should": ""
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "## Intro\n\nA very simple to use library to hook into the BitBucket api.\nAt the moment it covers issues and all related objects as well as getting repository and sources information.\nThe Api is in flux and you should expect changes coming in the future.\n\n### Callbacks\n\nAll callbacks take the standard node signature of `function (error, result)` unless otherwise specified.\n\n### CRUD API\n\nSome object expose a CRUD api that consist of the following methods and signature.\n\n    create(obj, cb);\n    getAll(cb);\n    getById(id, cb);\n    update(id, obj, cb);\n    delete(id, cb(err));\n\nThe callback for the `delete` method only returns an error or null if succesful.\n\nThe `obj` argument can be either a literal representing the resource or (in some cases) just a primitive, (eg: `Milestones` takes a `string`).\n\nSpecific details or changes to this API will be indicated in each object if need it.\n\n### Usage\n\n    var bitbucket = require('bitbucket-api');\n    var credentials = {username: 'USER', password: 'PWD'};\n    var client = bitbucket.createClient(credentials);\n    var repository = client.getRepository({slug: 'SLUG', owner: 'OWNER'}, function (err, repo) {\n       //Code to access the repo object.\n    });\n\n## Running the tests.\n\n    npm install\n    cd tests/\n    mv helper.js.back helper.js\n    vim helper.js //Enter your BitBucket credentials and a changeset on your repo and save the file\n    cd ../\n    npm test\n\nAll the tests at the moment are integration tests and will attempt to connect with BitBucket.\nFalse errors may happen due to timeout scenarios but it should be fine in most cases.\nThey run with a 15 secs timeout.\n\nIf you want to run the tests with a different timeout run then directly with mocha and the -t option, giving it the timeout in milliseconds.\n\n    mocha /tests -t 15000\n\n## Changelog\n=======\n\n#### 0.0.6\n\n* Adding support for user endpoint.\n* Also adding support for users endpoint. At the moment only account and emails resources have been implemented.\n* Breaking change, the cb in all .remove() methods always return null in the results.\n* Improved and simplified documentation.\n\n#### 0.0.5\n\n* Adding support for changesets and changeset.\n* Adding support for followers.\n* Complete documentation for Issues, Issue, Issue.Comments, Changeset, Changesets and Followers\n\n#### 0.0.4\n\n* Improve code structure and prepare to support multiple connection transports\n* Improve API: removing {succes: false} on error situations and returning Errors in the callback\n\n#### 0.0.3\n\n* Added support for sources\n\n## Api\n\n### createClient\n\nTakes an object with a `username` and a `password` keys\nReturns a BitBucket object\n\n    var bitbucket = require('bitbucket-api');\n    var credentials = {username: 'USER', password: 'PWD'};\n    var client = bitbucket.createClient(credentials);\n\n\n### BitBucket\n\n#### Instance properties\n\n    username // The username passed to the createClient function.\n    password // The password passed to the createClient function.\n    root     // The root for the bitbucket api, defaults to 'api.bitbucket.org'\n    version  // The version for the bitbucket api, defaults to '1.0s'\n\n#### Instance methods\n\n    credentials() // returns 'username:password'\n    getUrl()    // Builds the first part of the URL to connect to the bitbucket api\n\n#### Prototype methods\n\n    user();\n\nReturns a `User` object\n\n    getRepository(repository, cb)\n\nTakes an `repository` parameter with the `owner` and `slug` keys for the repository to get. To get details for the repository of this module the owner should be `hgarcia` and the slug `node-bitbucket-api`.\n\n    repositories(cb)\n\nResult is an array of the repositories the user has access to.\n\n\n### Repository\n\n#### Instance properties\n\nThis are mapped from the api result into a more proper JavaScript format, mostly replacing '_' with camelcase names.\n\n    provider // A reference to the BitBucket instance that created it.\n    scm // String either 'git' or 'mercurial'\n    hasWiki // Boolean\n    lastUpdated // Date\n    creator // String username of the person who created the repository\n    forksCount // Number\n    createdOn // Date\n    owner // String username of the repository owner\n    logo // String || null\n    emailMailingList //String\n    isMq // Boolean\n    size // Number\n    readOnly // Boolean\n    forkOff // String || null\n    mqOf // String || null;\n    followersCount // Number\n    state // String\n    utcCreatedOn // Date\n    website // String\n    description // String\n    hasIssuses // Boolean\n    isFork // Boolean\n    slug // String\n    isPrivate // Boolean\n    name // String\n    language // String ex: 'javascript'\n    utcLastUpdated // Date\n    emailWriters // Boolean\n    noPublicForks // Boolean\n    resourceURI // String\n\n#### Instance methods\n\n    credentials() // delegates to this.provider.credentials()\n    getUrl()    // Builds the URL to connect to this repository\n\n#### Prototype methods\n\n    changeset(hash)\n\nReturns a `Changeset` object\n\n    changesets()\n\nReturn a `Changesets` object\n\n    components()\n\nReturns a `Components` object\n\n    followers(cb)\n\nReturns a list of followers.\n\n    issues()\n\nReturns an `Issues` object\n\n    issue(issueId)\n\nTakes the `id` of an issue and returns an `Issue` object.\n\n    milestones()\n\nReturns a `Milestones` object\n\n    sources(path, revision)\n\nTakes the path to a folder (defaults to \"/\") or file and optionally the revision or branch name (defaults to master). Returns a `Sources` object.\nIf `path` ends on \"/\" the API considers that you are looking for a directory instead of a file.\n\n    versions()\n\nReturns a `Versions` object.\n\n\n### Changesets\n\nProvides access to the changesets for a repository\n\n#### Instance methods\n\n    get(limit, start, cb)\n\nReturns a list of changesets starting from the `start` hash. The `limit` is an integer indicating how many to return.\n\n    getById(hash, cb)\n\nTakes the `hash` for a given changeset and returns it.\n\n### Changeset\n\nProvides access to stat, diff, likes and comments on a given changeset.\n\n#### Instance methods\n\n    getDiff(cb)\n\nGet the diff of the changeset.\n\n    getStats(cb)\n\nGet statistics for the given cahngeset.\n\n    getLikes(cb)\n\nGet the likes for the changeset\n\n    comments()\n\nReturns a `Changeset.Comments` object\n\n### Changeset.Comments\n\nStandard CRUD API.\nThe `obj` argument is a literal representing a changeset comment.\n\n### Components, Milestones, Versions\n\nUse the CRUD API. The `getAll` method takes only a callback.\nThe `obj` parameter is a string.\n\n### Issue\n\nProvides access to the comments on an issue\n\n#### Instance methods\n\n    comments()\n\nReturn an `Issue.Comments` object\n\n### Issue.Comments\n\nStandard CRUD API.\nThe `obj` argument is a string.\n\n### Issues\n\nCustom CRUD API.\n\nLike the standard CRUD API but without instead of a `getAll` method exposes a `get` method that takes an `options` argument and a callback. The `options` is used to filter the issues returned.\n\nThe `obj` argument is a literal that represents the issue object.\n\n### Sources\n\nProvides access to information about files and directories in the repository as well as raw content from a file or folder structure.\n\n#### Instance methods\n\n    info(cb)\n    raw(cb)\n\nThe result contains a data and a lines properties. This only works for text files.\n\n    result.data //Contains a string with the file raw content\n    result.lines //Contains an array with the string split by '\\n' characters.\n\n### User\n\n#### Instance methods\n\n    follows(cb)\n\nList of repositories that the user follows.\n\n    get(cb)\n\nDetails of the user account\n\n    privileges(cb)\n\nList of user privileges\n\n    update(id, obj, cb)\n\nUpdate the user details, `obj` is a literal with the data to change.\n\n    repositories()\n\nReturn a `User.Repositories` object.\n\n### User.Repositories\n\n#### Instance methods\n\n    dashboard(cb)\n\nThe data show in a user dashboard.\n\n    following(cb)\n\nInfo about repositories the user follow.\n\n    getAll(cb)\n\nList of all repositories for the user.\n\n\n### Users\n\n",
  "readmeFilename": "README.md",
  "_id": "bitbucket-api@0.0.6",
  "dist": {
    "shasum": "4c15c488292a3709c665480582e3a60154763070"
  },
  "_from": "bitbucket-api@",
  "_resolved": "https://registry.npmjs.org/bitbucket-api/-/bitbucket-api-0.0.6.tgz"
}
