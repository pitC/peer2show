var should = require("should");
var bitbucket = require('../index');
var goodOptions = require('./helper').credentials;
var repoData = require('./helper').repository;
var emailAddresses = require('./helper').emails;

describe('BitBucket.users()', function() {
  var client;
  var account;
  var emails;
  before(function (done) {
    client = bitbucket.createClient(goodOptions);
    account = client.users(repoData.owner).account();
    emails = client.users(repoData.owner).emails();
    done();
  });

  describe(".account().get()", function () {
    it('should return information about the account for the user', function (done) {
      account.get(function (err, result) {
        result.should.have.property('repositories');
        result.should.have.property('user');
        done(err);
      });
    });
  });

  describe(".account().plan()", function () {
    it('should return the number of users in the plan', function (done) {
      account.plan(function (err, result) {
        result.should.have.property("count");
        done(err);
      });
    });
  });

  describe(".account().followers()", function () {
    it('should return the followers of the account', function (done) {
      account.followers(function (err, result) {
        result.should.have.property("followers");
        result.should.have.property("count");
        done(err);
      });
    });
  });

  describe(".emails().getAll()", function () {
    it('should return a list of email', function (done) {
      emails.getAll(function (err, result) {
        Array.isArray(result).should.be.ok;
        done(err);
      });
    });
  });

  describe(".emails().get(email)", function () {
    it('should return details for one email', function (done) {
      emails.get(emailAddresses.accountEmail, function (err, result) {
        result.should.have.property('active');
        result.should.have.property('primary');
        result.should.have.property('email');
        done(err);
      });
    });
  });

  describe(".emails().post(email)", function () {
    it('should add a new email to the account', function (done) {
      emails.add(emailAddresses.newEmail, function (err, result) {
        result.should.have.property('active');
        result.should.have.property('primary');
        result.should.have.property('email');
        done(err);
      });
    });
  });

  describe(".emails().setAsPrimary(email)", function () {
    it('should return details on the repositories that is following', function (done) {
      emails.setAsPrimary(emailAddresses.newEmail, function (err, result) {
        result.should.have.property('active');
        done(err);
      });
    });
  });


});
